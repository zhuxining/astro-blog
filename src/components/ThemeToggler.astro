---
import { Icon } from "astro-icon/components";
import { theme } from "../store";

const themes = [
    { name: "os-default", icon: "ri:contrast-fill" },
    { name: "light", icon: "ri:sun-fill" },
    { name: "dark", icon: "ri:moon-line" },
];
---

<script>
    // Set the theme based on the preference or system default.
    function setTheme(newTheme: string) {
        // Remove any existing theme class and add the new one.
        document.documentElement.className = newTheme;
        // Update local storage with the new theme.
        localStorage.setItem("theme", newTheme);
    }

    // Update the ARIA 'pressed' state of buttons.
    function updateAriaPressed(theme: string) {
        document
            .querySelectorAll(".theme-toggler")
            .forEach((button) =>
                button.setAttribute(
                    "aria-pressed",
                    button.getAttribute("data-theme") === theme
                        ? "true"
                        : "false",
                ),
            );
    }

    // Listen for theme changes and update the UI accordingly.
    function handleThemeChange() {
        const currentTheme = localStorage.getItem("theme") || "os-default";
        setTheme(currentTheme);
        updateAriaPressed(currentTheme);
    }

    // Add event listener for theme toggling.
    function addThemeListeners() {
        document.querySelectorAll(".theme-toggler").forEach((button) => {
            button.addEventListener("click", () => {
                const newTheme =
                    button.getAttribute("data-theme") || "os-default";
                setTheme(newTheme);
                updateAriaPressed(newTheme);
            });
        });
    }

    // Listen for system color scheme changes.
    function listenForSystemColorSchemeChange() {
        window
            .matchMedia("(prefers-color-scheme: dark)")
            .addEventListener("change", (e) => {
                if (!localStorage.getItem("theme")) {
                    setTheme(e.matches ? "dark" : "light");
                }
            });
    }

    // Initialize the theme when the DOM is ready.
    document.addEventListener("DOMContentLoaded", () => {
        handleThemeChange();
        addThemeListeners();
        listenForSystemColorSchemeChange();
    });
</script>

<div class="flex gap-3 forced-colors:hidden">
    {
        themes.map((theme) => (
            <button
                type="button"
                class="theme-toggler opacity-75 aria-pressed:opacity-100 hover:opacity-100"
                aria-pressed="false"
                aria-label={`Switch to ${theme.name}`}
                data-theme={theme.name}
            >
                <Icon name={theme.icon} class="fill-current" />
            </button>
        ))
    }
</div>
